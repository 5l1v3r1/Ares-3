package com.basic.core.scheduler;

import com.basic.core.util.AresUtils;
import com.google.common.collect.Sets;
import com.basic.util.PropertiesUtil;
import org.apache.storm.scheduler.*;
import org.apache.storm.scheduler.resource.Component;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.*;

public class GameScheduler implements IScheduler {
    private static final Logger LOG = LoggerFactory.getLogger(GameScheduler.class);

    //The parameter q denotes the computation cost for executors to process a single tuple.
    private static Map<ExecutorDetails, Double> q;

    //The parameter lambda denotes the data processing time for slots to process a single computation cost.
    private static Map<WorkerSlot, Double> lambda;

    //The parameter d denotes the data transferring time of node pairs.
    private static Map<WorkerSlot, Map<WorkerSlot, Double>> d;

    //The parameter w denotes the recover time of upstream and downstream executor pairs.
    private static Map<ExecutorDetails, Map<ExecutorDetails, Double>> w;

    //The parameter alpha is generated by transforming Problem 1 into Problem 2, and varies from executors to executors.
    private static Map<ExecutorDetails, Double> alpha;

    //The parameter beta is generated by transforming Problem 1 into Problem 2, and varies from executor pairs to executor pairs.
    private static Map<ExecutorDetails, Map<ExecutorDetails, Double>> beta;

    //The parameter gamma is generated by transforming Problem 1 into Problem 2, and varies from executor pairs to executor pairs.
    private static double gamma;

    /*
        public static double getProcessingCost(ExecutorDetails executor, WorkerSlot slot) {
            return alpha.get(executor) * lambda.get(slot);
        }

        public static double getTransferringCost(ExecutorDetails upExecutor, WorkerSlot upSlot, ExecutorDetails downExecutor, WorkerSlot downSlot) {
            return beta.get(upExecutor).get(downExecutor) * d.get(upSlot).get(downSlot) / 2;
        }

        public static double getRecoveryCost(ExecutorDetails upExecutor, ExecutorDetails downExecutor) {
            return gamma.get(upExecutor).get(downExecutor) * d.get(upExecutor).get(downExecutor) / 2;
        }
    */
    private static  Map<ExecutorDetails, WorkerSlot> gameScheduling(TopologyDetails topology, Cluster cluster, List<ExecutorDetails> executors, List<WorkerSlot> slots) {
        LOG.info("gameScheduling................................");
        //Initialize the network topology.
        Map<String, List<String>> networkTopography = cluster.getNetworkTopography();

        LOG.info("GameScheldueing workSlot................................");
        for(WorkerSlot slot:slots){
            LOG.info("workSlot host:"+cluster.getHost(slot.getNodeId())+" port:"+slot.getPort());
        }

        Map<String, String> nodeToRack = new HashMap<String, String>();
        for (Map.Entry<String, List<String>> entry : networkTopography.entrySet()) {
            String rack = entry.getKey();
            List<String> nodes = entry.getValue();
            for (String node : nodes) {
                List<SupervisorDetails> supervisorsByHost = cluster.getSupervisorsByHost(node);
                nodeToRack.put(supervisorsByHost.get(0).getId(), rack);
            }
        }
        LOG.info("nodeToRank: "+nodeToRack);

        //Initialize important parameters.
        q = AresUtils.initializeQ(topology,executors);
        lambda = AresUtils.initializeLambda(slots,cluster);
        d = AresUtils.initializeD(slots,cluster);
        w = AresUtils.initializeW(topology);
        alpha = AresUtils.initializeAlpha(topology, executors);
        beta = AresUtils.initializeBeta(topology, executors);
        gamma = AresUtils.W2/networkTopography.size();

        //Assign an executor to a slot randomly.
        Map<ExecutorDetails, WorkerSlot> assignment = new HashMap<ExecutorDetails, WorkerSlot>();

        for (ExecutorDetails executor : executors) {
            Random random = new Random();
            int index = random.nextInt(slots.size());
            assignment.put(executor, slots.get(index));
        }

        //The flag indicates whether achieves Nash equilibrium.
        boolean isNashEquilibrium;

        //The process of best-response dynamics.

        do {
            isNashEquilibrium = true;
            //Make the best-response strategy for each executor by turn.

            for (ExecutorDetails executor : executors) {
                //Initialize the list of upstream and downstream executors for current executor.
                String currentComponentId = topology.getExecutorToComponent().get(executor);
                Component currentComponent = topology.getComponents().get(currentComponentId);
                if(currentComponent!=null){
                    //过滤掉__acker的ExecutorDetails

                    List<ExecutorDetails> upstreamExecutors = new ArrayList<>();
                    LOG.info("currentComponent: "+String.valueOf(currentComponent));
                    for (String parentId : currentComponent.parents) {
                        List<ExecutorDetails> parentExecutors = topology.getComponents().get(parentId).execs;
                        upstreamExecutors.addAll(parentExecutors);
                    }
                    List<ExecutorDetails> downstreamExecutors = new ArrayList<>();
                    for (String childrenId : currentComponent.children) {
                        downstreamExecutors.addAll(topology.getComponents().get(childrenId).execs);
                    }

                    //Store the previous assignment of an executor for later check of Nash equilibrium.
                    WorkerSlot preAssignment = assignment.get(executor);

                    LOG.info("beta："+beta);
                    //Initialize the costs of assigning an executor to different slots.
                    Map<WorkerSlot, Double> costExecutorToSlot = new HashMap<WorkerSlot, Double>();
                    for (WorkerSlot slot : slots) {
//                        PropertiesUtil.init("/componentToNodecost.properties");
//                        Double componentToNodecost = Double.valueOf(PropertiesUtil.getProperties(currentComponentId+","+cluster.getHost(slot.getNodeId())));
//                        costExecutorToSlot.put(slot, alpha.get(executor) * componentToNodecost);
                        String nodeId = slot.getNodeId();

                        //////////////////////////////////////////getnodeToExecutorsnum////////////////////////////////////////////
                        int nodeToExecutorsnum=0;
                        List<WorkerSlot> nodeWorkSlotList=new ArrayList<>();
                        for (WorkerSlot tempSlot : slots) {
                            if(tempSlot.getNodeId().equals(nodeId)){
                                if(getExecutorListBySlot(assignment,tempSlot)!=null)
                                    nodeWorkSlotList.add(tempSlot);
                            }
                        }
                        nodeToExecutorsnum=nodeWorkSlotList.size();
                        /////////////////////////////////////////getnodeToExecutorsnum/////////////////////////////////////////////

                        PropertiesUtil.init("/componentcost.properties");
                        Double componentcost = Double.valueOf(PropertiesUtil.getProperties(currentComponentId));
                        double cost=alpha.get(executor) * componentcost * lambda.get(slot);

                        for(WorkerSlot NodeWorkerslot:nodeWorkSlotList){

                            if(costExecutorToSlot.get(NodeWorkerslot)!=null)
                                costExecutorToSlot.put(NodeWorkerslot,costExecutorToSlot.get(NodeWorkerslot)+cost);
                            else {
                                List<ExecutorDetails> executorListBySlot = getExecutorListBySlot(assignment, NodeWorkerslot);
                                double NodeWorkerslotcost=0.0;
                                for(ExecutorDetails tmp:executorListBySlot){
                                    String temComponentId = topology.getExecutorToComponent().get(tmp);
                                    Component temComponent = topology.getComponents().get(temComponentId);
                                    if(temComponent!=null){
                                        Double tmpcost = Double.valueOf(PropertiesUtil.getProperties(temComponentId));
                                        NodeWorkerslotcost+=alpha.get(tmp) * tmpcost * lambda.get(NodeWorkerslot);
                                    }
                                }
                                costExecutorToSlot.put(NodeWorkerslot,NodeWorkerslotcost+cost);
                            }
                        }

                        costExecutorToSlot.put(slot,(nodeToExecutorsnum+1)*cost);

                        for (ExecutorDetails upExecutor : upstreamExecutors) {
//                          LOG.info("upExecutor："+upExecutor+" downexecutor："+executor);
                            double transferringCost = costExecutorToSlot.get(slot) + beta.get(upExecutor).get(executor) * d.get(assignment.get(upExecutor)).get(slot) / 2;
                            costExecutorToSlot.put(slot, transferringCost);
                            if (nodeToRack.get(assignment.get(upExecutor).getNodeId()).equals(nodeToRack.get(assignment.get(executor).getNodeId()))) {
                                double recoveryCost = costExecutorToSlot.get(slot) + gamma * w.get(upExecutor).get(executor) / 2;
                                costExecutorToSlot.put(slot, recoveryCost);
                            }
                        }
                        for (ExecutorDetails downExecutor : downstreamExecutors) {
                            //beta.get(upExecutor).get(downExecutor) * d.get(upSlot).get(downSlot) / 2
                            double transferringCost = costExecutorToSlot.get(slot) + beta.get(executor).get(downExecutor) * d.get(slot).get(assignment.get(downExecutor)) / 2;
                            costExecutorToSlot.put(slot, transferringCost);

                            if (nodeToRack.get(assignment.get(executor).getNodeId()).equals(nodeToRack.get(assignment.get(downExecutor).getNodeId()))) {
                                double recoveryCost = costExecutorToSlot.get(slot) + gamma * w.get(executor).get(downExecutor) / 2;
                                costExecutorToSlot.put(slot, recoveryCost);
                            }
                        }
                    }

                    //Make the best-response strategy for an executor.
                    double minCost = Double.MAX_VALUE;
                    for (Map.Entry<WorkerSlot, Double> entry : costExecutorToSlot.entrySet()) {
                        if (entry.getValue() < minCost) {
                            minCost = entry.getValue();
                            assignment.put(executor, entry.getKey());
                        }
                    }

                    //Check whether achieves Nash equilibrium.
                    if (isNashEquilibrium && assignment.get(executor) != preAssignment) {
                        isNashEquilibrium = false;
                    }
                }
            }
        } while (!isNashEquilibrium);

        return assignment;
    }


    /**
     * 通过已经分配好的assignment 调度策略 根据workSlot 获取运行在WorkSlot上的Executors
     * @param assignment
     * @param workerSlot
     * @return
     */
    public static List<ExecutorDetails> getExecutorListBySlot(Map<ExecutorDetails, WorkerSlot> assignment, WorkerSlot workerSlot){
        HashMap<WorkerSlot, List<ExecutorDetails>> workerSlotListHashMap = AresUtils.reverseMap(assignment);
        return workerSlotListHashMap.get(workerSlot);
    }

    private static Map<WorkerSlot, List<ExecutorDetails>> getAliveAssignedWorkerSlotExecutors(Cluster cluster, String topologyId) {
        SchedulerAssignment existingAssignment = cluster.getAssignmentById(topologyId);
        Map<ExecutorDetails, WorkerSlot> executorToSlot = null;
        if (existingAssignment != null) {
            executorToSlot = existingAssignment.getExecutorToSlot();
        }

        return AresUtils.reverseMap(executorToSlot);
    }

    private static Map<ExecutorDetails, WorkerSlot> scheduleTopologyWithGame(TopologyDetails topology, Cluster cluster) {
        LOG.info("start scheduleTopologyWithGame................................");

        List<WorkerSlot> availableSlots = cluster.getAvailableSlots();

        Set<ExecutorDetails> allExecutors = (Set<ExecutorDetails>) topology.getExecutors();
        Map<WorkerSlot, List<ExecutorDetails>> aliveAssigned = getAliveAssignedWorkerSlotExecutors(cluster, topology.getId());
        int totalSlotsToUse = Math.min(topology.getNumWorkers(), availableSlots.size() + aliveAssigned.size());

        if (availableSlots == null) {
            LOG.error("No available slots for topology: {}", topology.getName());
            return new HashMap<ExecutorDetails, WorkerSlot>();
        }

        LOG.info("scheduleTopologyWithGame：{}"+ topology.getName());

        //allow requesting slots number bigger than available slots
        //TODO 改写DefaultScheduler 调度
        List<WorkerSlot> reassignSlots = availableSlots;

        Set<ExecutorDetails> aliveExecutors = new HashSet<ExecutorDetails>();
        for (List<ExecutorDetails> list : aliveAssigned.values()) {
            aliveExecutors.addAll(list);
        }
        Set<ExecutorDetails> reassignExecutors = Sets.difference(allExecutors, aliveExecutors);

        Map<ExecutorDetails, WorkerSlot> reassignment = new HashMap<ExecutorDetails, WorkerSlot>();
        if (reassignSlots.size() == 0) {
            return reassignment;
        }

        List<ExecutorDetails> executors = new ArrayList<ExecutorDetails>(reassignExecutors);

        LOG.info("reassignSlots size:"+ reassignSlots.size()+" reassignExecutors size:"+executors.size());
        reassignment = gameScheduling(topology, cluster, executors, reassignSlots);

        LOG.info("reassignment:"+ reassignment+"\n");
        for(ExecutorDetails executor:reassignment.keySet()){
            WorkerSlot slot = reassignment.get(executor);
            LOG.info("compentId:"+topology.getExecutorToComponent().get(executor)+" executorId:"+executor.getStartTask()+" host:"+cluster.getHost(slot.getNodeId())+" port:"+slot.getPort());
        }

        if (reassignment.size() != 0) {
            LOG.info("Available slots: {}", availableSlots.toString());
        }
        return reassignment;
    }

    public static void scheduleTopologiesWithGame(Topologies topologies, Cluster cluster) {

        for (TopologyDetails topology : cluster.needsSchedulingTopologies(topologies)) {
            String topologyId = topology.getId();
            Map<ExecutorDetails, WorkerSlot> newAssignment = scheduleTopologyWithGame(topology, cluster);
            Map<WorkerSlot, List<ExecutorDetails>> nodePortToExecutors = AresUtils.reverseMap(newAssignment);

            for (Map.Entry<WorkerSlot, List<ExecutorDetails>> entry : nodePortToExecutors.entrySet()) {
                WorkerSlot nodePort = entry.getKey();
                List<ExecutorDetails> executors = entry.getValue();
                cluster.assign(nodePort, topologyId, executors);
            }
        }
    }

    @Override
    public void prepare(Map conf) {

    }

    @Override
    public void schedule(Topologies topologies, Cluster cluster) {
        scheduleTopologiesWithGame(topologies, cluster);
    }


    public Map<String, Object> config() {
        return new HashMap<>();
    }

}
